var N=null,E="",T="t",U="u",searchIndex={};
var R=["smallvec","Constructs a new `SmallVec` on the stack from an `A`…","usize","extend_from_slice","result","try_from","try_into","into_iter","borrow","borrow_mut","type_id","ordering","formatter","intoiterator","size_hint","option","next_back","ExtendFromSlice","SmallVec","IntoIter","ropeslice","Creates an iterator over the chunks of the `Rope`, with…","len_bytes","len_chars","len_lines","byte_to_char","Returns the char index of the given byte.","byte_to_line","Returns the line index of the given byte.","char_to_byte","Returns the byte index of the given char.","char_to_line","Returns the line index of the given char.","line_to_byte","Returns the byte index of the start of the given line.","line_to_char","Returns the char index of the start of the given line.","Returns the byte at `byte_idx`.","Returns the char at `char_idx`.","Returns the line at `line_idx`.","chunk_at_byte","Returns the chunk containing the given byte index.","chunk_at_char","Returns the chunk containing the given char index.","chunk_at_line_break","Returns the chunk containing the given line break.","bytes_at","chars_at","lines_at","chunks_at_byte","chunks_at_char","Creates an iterator over the chunks of the `RopeSlice`,…","chunks_at_line_break","Advances the iterator backwards and returns the previous…","to_owned","clone_into","to_string","ropey::iter","typeid","ropebuilder","chunks","partial_cmp","string","Advances the iterator forward and returns the next value.","from_iter","RopeBuilder","RopeSlice","capacity","shrink_to_fit","default"];
searchIndex["ropey"]={"doc":"Ropey is a utf8 text rope for Rust. It is fast, robust,…","i":[[3,"Rope","ropey","A utf8 text rope.",N,N],[3,R[65],E,"An efficient incremental `Rope` builder.",N,N],[3,R[66],E,"An immutable view into part of a `Rope`.",N,N],[11,"new",E,"Creates an empty `Rope`.",0,[[],["self"]]],[11,"from_str",E,"Creates a `Rope` from a string slice.",0,[[["str"]],["self"]]],[11,"from_reader",E,"Creates a `Rope` from the output of a reader.",0,[[["read"]],[R[4]]]],[11,"write_to",E,"Writes the contents of the `Rope` to a writer.",0,[[["self"],["write"]],[R[4]]]],[11,R[22],E,"Total number of bytes in the `Rope`.",0,[[["self"]],[R[2]]]],[11,R[23],E,"Total number of chars in the `Rope`.",0,[[["self"]],[R[2]]]],[11,R[24],E,"Total number of lines in the `Rope`.",0,[[["self"]],[R[2]]]],[11,R[67],E,"Total size of the `Rope`'s text buffer space, in bytes.",0,[[["self"]],[R[2]]]],[11,R[68],E,"Shrinks the `Rope`'s capacity to the minimum possible.",0,[[["self"]]]],[11,"insert",E,"Inserts `text` at char index `char_idx`.",0,[[["self"],[R[2]],["str"]]]],[11,"insert_char",E,"Inserts a single char `ch` at char index `char_idx`.",0,[[["self"],[R[2]],["char"]]]],[11,"remove",E,"Removes the text in the given char index range.",0,[[["self"],["r"]]]],[11,"split_off",E,"Splits the `Rope` at `char_idx`, returning the right part…",0,[[["self"],[R[2]]],["self"]]],[11,"append",E,"Appends a `Rope` to the end of this one, consuming the…",0,[[["self"]]]],[11,R[25],E,R[26],0,[[["self"],[R[2]]],[R[2]]]],[11,R[27],E,R[28],0,[[["self"],[R[2]]],[R[2]]]],[11,R[29],E,R[30],0,[[["self"],[R[2]]],[R[2]]]],[11,R[31],E,R[32],0,[[["self"],[R[2]]],[R[2]]]],[11,R[33],E,R[34],0,[[["self"],[R[2]]],[R[2]]]],[11,R[35],E,R[36],0,[[["self"],[R[2]]],[R[2]]]],[11,"byte",E,R[37],0,[[["self"],[R[2]]],["u8"]]],[11,"char",E,R[38],0,[[["self"],[R[2]]],["char"]]],[11,"line",E,R[39],0,[[["self"],[R[2]]],[R[20]]]],[11,R[40],E,R[41],0,[[["self"],[R[2]]]]],[11,R[42],E,R[43],0,[[["self"],[R[2]]]]],[11,R[44],E,R[45],0,[[["self"],[R[2]]]]],[11,"slice",E,"Gets an immutable slice of the `Rope`.",0,[[["self"],["r"]],[R[20]]]],[11,"bytes",E,"Creates an iterator over the bytes of the `Rope`.",0,[[["self"]],["bytes"]]],[11,R[46],E,"Creates an iterator over the bytes of the `Rope`, starting…",0,[[["self"],[R[2]]],["bytes"]]],[11,"chars",E,"Creates an iterator over the chars of the `Rope`.",0,[[["self"]],["chars"]]],[11,R[47],E,"Creates an iterator over the chars of the `Rope`, starting…",0,[[["self"],[R[2]]],["chars"]]],[11,"lines",E,"Creates an iterator over the lines of the `Rope`.",0,[[["self"]],["lines"]]],[11,R[48],E,"Creates an iterator over the lines of the `Rope`, starting…",0,[[["self"],[R[2]]],["lines"]]],[11,R[60],E,"Creates an iterator over the chunks of the `Rope`.",0,[[["self"]],[R[60]]]],[11,R[49],E,R[21],0,[[["self"],[R[2]]]]],[11,R[50],E,R[21],0,[[["self"],[R[2]]]]],[11,R[52],E,R[21],0,[[["self"],[R[2]]]]],[11,"new",E,"Creates a new RopeBuilder, ready for input.",1,[[],["self"]]],[11,"append",E,"Appends `chunk` to the end of the in-progress `Rope`.",1,[[["self"],["str"]]]],[11,"finish",E,"Finishes the build, and returns the `Rope`.",1,[[],["rope"]]],[11,R[22],E,"Total number of bytes in the `RopeSlice`.",2,[[["self"]],[R[2]]]],[11,R[23],E,"Total number of chars in the `RopeSlice`.",2,[[["self"]],[R[2]]]],[11,R[24],E,"Total number of lines in the `RopeSlice`.",2,[[["self"]],[R[2]]]],[11,R[25],E,R[26],2,[[["self"],[R[2]]],[R[2]]]],[11,R[27],E,R[28],2,[[["self"],[R[2]]],[R[2]]]],[11,R[29],E,R[30],2,[[["self"],[R[2]]],[R[2]]]],[11,R[31],E,R[32],2,[[["self"],[R[2]]],[R[2]]]],[11,R[33],E,R[34],2,[[["self"],[R[2]]],[R[2]]]],[11,R[35],E,R[36],2,[[["self"],[R[2]]],[R[2]]]],[11,"byte",E,R[37],2,[[["self"],[R[2]]],["u8"]]],[11,"char",E,R[38],2,[[["self"],[R[2]]],["char"]]],[11,"line",E,R[39],2,[[["self"],[R[2]]],[R[20]]]],[11,R[40],E,R[41],2,[[["self"],[R[2]]]]],[11,R[42],E,R[43],2,[[["self"],[R[2]]]]],[11,R[44],E,R[45],2,[[["self"],[R[2]]]]],[11,"as_str",E,"Returns the entire contents of the `RopeSlice` as a `&str`…",2,[[["self"]],[["str"],[R[15],["str"]]]]],[11,"slice",E,"Returns a sub-slice of the `RopeSlice` in the given char…",2,[[["self"],["r"]],["self"]]],[11,"bytes",E,"Creates an iterator over the bytes of the `RopeSlice`.",2,[[["self"]],["bytes"]]],[11,R[46],E,"Creates an iterator over the bytes of the `RopeSlice`,…",2,[[["self"],[R[2]]],["bytes"]]],[11,"chars",E,"Creates an iterator over the chars of the `RopeSlice`.",2,[[["self"]],["chars"]]],[11,R[47],E,"Creates an iterator over the chars of the `RopeSlice`,…",2,[[["self"],[R[2]]],["chars"]]],[11,"lines",E,"Creates an iterator over the lines of the `RopeSlice`.",2,[[["self"]],["lines"]]],[11,R[48],E,"Creates an iterator over the lines of the `RopeSlice`,…",2,[[["self"],[R[2]]],["lines"]]],[11,R[60],E,"Creates an iterator over the chunks of the `RopeSlice`.",2,[[["self"]],[R[60]]]],[11,R[49],E,R[51],2,[[["self"],[R[2]]]]],[11,R[50],E,R[51],2,[[["self"],[R[2]]]]],[11,R[52],E,R[51],2,[[["self"],[R[2]]]]],[0,"iter",E,"Iterators over a `Rope`'s data.",N,N],[3,"Bytes",R[57],"An iterator over a `Rope`'s bytes.",N,N],[3,"Chars",E,"An iterator over a `Rope`'s chars.",N,N],[3,"Lines",E,"An iterator over a `Rope`'s lines.",N,N],[3,"Chunks",E,"An iterator over a `Rope`'s contiguous `str` chunks.",N,N],[11,"prev",E,R[53],3,[[["self"]],[[R[15],["u8"]],["u8"]]]],[11,"prev",E,R[53],4,[[["self"]],[[R[15],["char"]],["char"]]]],[11,"prev",E,R[53],5,[[["self"]],[[R[20]],[R[15],[R[20]]]]]],[11,"prev",E,R[53],6,[[["self"]],[["str"],[R[15],["str"]]]]],[0,"str_utils","ropey","Utility functions for utf8 string slices.",N,N],[5,"byte_to_char_idx","ropey::str_utils","Converts from byte-index to char-index in a string slice.",N,[[["str"],[R[2]]],[R[2]]]],[5,"byte_to_line_idx",E,"Converts from byte-index to line-index in a string slice.",N,[[["str"],[R[2]]],[R[2]]]],[5,"char_to_byte_idx",E,"Converts from char-index to byte-index in a string slice.",N,[[["str"],[R[2]]],[R[2]]]],[5,"char_to_line_idx",E,"Converts from char-index to line-index in a string slice.",N,[[["str"],[R[2]]],[R[2]]]],[5,"line_to_byte_idx",E,"Converts from line-index to byte-index in a string slice.",N,[[["str"],[R[2]]],[R[2]]]],[5,"line_to_char_idx",E,"Converts from line-index to char-index in a string slice.",N,[[["str"],[R[2]]],[R[2]]]],[11,R[54],"ropey",E,0,[[["self"]],[T]]],[11,R[55],E,E,0,[[["self"],[T]]]],[11,"into",E,E,0,[[],[U]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[56],E,E,0,[[["self"]],[R[62]]]],[11,R[5],E,E,0,[[[U]],[R[4]]]],[11,R[6],E,E,0,[[],[R[4]]]],[11,R[9],E,E,0,[[["self"]],[T]]],[11,R[8],E,E,0,[[["self"]],[T]]],[11,R[10],E,E,0,[[["self"]],[R[58]]]],[11,R[54],E,E,1,[[["self"]],[T]]],[11,R[55],E,E,1,[[["self"],[T]]]],[11,"into",E,E,1,[[],[U]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[5],E,E,1,[[[U]],[R[4]]]],[11,R[6],E,E,1,[[],[R[4]]]],[11,R[9],E,E,1,[[["self"]],[T]]],[11,R[8],E,E,1,[[["self"]],[T]]],[11,R[10],E,E,1,[[["self"]],[R[58]]]],[11,R[54],E,E,2,[[["self"]],[T]]],[11,R[55],E,E,2,[[["self"],[T]]]],[11,"into",E,E,2,[[],[U]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[56],E,E,2,[[["self"]],[R[62]]]],[11,R[5],E,E,2,[[[U]],[R[4]]]],[11,R[6],E,E,2,[[],[R[4]]]],[11,R[9],E,E,2,[[["self"]],[T]]],[11,R[8],E,E,2,[[["self"]],[T]]],[11,R[10],E,E,2,[[["self"]],[R[58]]]],[11,R[54],R[57],E,3,[[["self"]],[T]]],[11,R[55],E,E,3,[[["self"],[T]]]],[11,"into",E,E,3,[[],[U]]],[11,R[7],E,E,3,[[],["i"]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[5],E,E,3,[[[U]],[R[4]]]],[11,R[6],E,E,3,[[],[R[4]]]],[11,R[9],E,E,3,[[["self"]],[T]]],[11,R[8],E,E,3,[[["self"]],[T]]],[11,R[10],E,E,3,[[["self"]],[R[58]]]],[11,R[54],E,E,4,[[["self"]],[T]]],[11,R[55],E,E,4,[[["self"],[T]]]],[11,"into",E,E,4,[[],[U]]],[11,R[7],E,E,4,[[],["i"]]],[11,"from",E,E,4,[[[T]],[T]]],[11,R[5],E,E,4,[[[U]],[R[4]]]],[11,R[6],E,E,4,[[],[R[4]]]],[11,R[9],E,E,4,[[["self"]],[T]]],[11,R[8],E,E,4,[[["self"]],[T]]],[11,R[10],E,E,4,[[["self"]],[R[58]]]],[11,R[54],E,E,5,[[["self"]],[T]]],[11,R[55],E,E,5,[[["self"],[T]]]],[11,"into",E,E,5,[[],[U]]],[11,R[7],E,E,5,[[],["i"]]],[11,"from",E,E,5,[[[T]],[T]]],[11,R[5],E,E,5,[[[U]],[R[4]]]],[11,R[6],E,E,5,[[],[R[4]]]],[11,R[9],E,E,5,[[["self"]],[T]]],[11,R[8],E,E,5,[[["self"]],[T]]],[11,R[10],E,E,5,[[["self"]],[R[58]]]],[11,R[54],E,E,6,[[["self"]],[T]]],[11,R[55],E,E,6,[[["self"],[T]]]],[11,"into",E,E,6,[[],[U]]],[11,R[7],E,E,6,[[],["i"]]],[11,"from",E,E,6,[[[T]],[T]]],[11,R[5],E,E,6,[[[U]],[R[4]]]],[11,R[6],E,E,6,[[],[R[4]]]],[11,R[9],E,E,6,[[["self"]],[T]]],[11,R[8],E,E,6,[[["self"]],[T]]],[11,R[10],E,E,6,[[["self"]],[R[58]]]],[11,R[69],"ropey",E,0,[[],["self"]]],[11,R[69],E,E,1,[[],[R[59]]]],[11,"clone",E,E,0,[[["self"]],["rope"]]],[11,"clone",E,E,1,[[["self"]],[R[59]]]],[11,"clone",E,E,2,[[["self"]],[R[20]]]],[11,"clone",R[57],E,3,[[["self"]],["bytes"]]],[11,"clone",E,E,4,[[["self"]],["chars"]]],[11,"clone",E,E,5,[[["self"]],["lines"]]],[11,"clone",E,E,6,[[["self"]],[R[60]]]],[11,R[61],"ropey",E,0,[[["self"],["rope"]],[[R[15],[R[11]]],[R[11]]]]],[11,R[61],E,E,2,[[["self"],[R[20]]],[[R[15],[R[11]]],[R[11]]]]],[11,"eq",E,E,0,[[["self"],["rope"]],["bool"]]],[11,"eq",E,E,0,[[["self"],["str"]],["bool"]]],[11,"eq",E,E,0,[[["self"],["str"]],["bool"]]],[11,"eq",E,E,0,[[["self"],[R[62]]],["bool"]]],[11,"eq",E,E,0,[[["self"],["cow"]],["bool"]]],[11,"eq",E,E,2,[[["self"],[R[20]]],["bool"]]],[11,"eq",E,E,2,[[["self"],["str"]],["bool"]]],[11,"eq",E,E,2,[[["self"],["str"]],["bool"]]],[11,"eq",E,E,2,[[["self"],[R[62]]],["bool"]]],[11,"eq",E,E,2,[[["self"],["cow"]],["bool"]]],[11,"eq",E,E,2,[[["self"],["rope"]],["bool"]]],[11,"eq",E,E,0,[[["self"],[R[20]]],["bool"]]],[11,"cmp",E,E,0,[[["self"],["rope"]],[R[11]]]],[11,"cmp",E,E,2,[[["self"],[R[20]]],[R[11]]]],[11,"from",E,E,0,[[["str"]],["self"]]],[11,"from",E,E,0,[[["str"],["cow",["str"]]],["self"]]],[11,"from",E,E,0,[[[R[62]]],["self"]]],[11,"from",E,E,0,[[[R[20]]],["self"]]],[11,"from",E,E,2,[[["str"]],["self"]]],[11,"next",R[57],R[63],3,[[["self"]],[[R[15],["u8"]],["u8"]]]],[11,R[14],E,E,3,[[["self"]]]],[11,"next",E,R[63],4,[[["self"]],[[R[15],["char"]],["char"]]]],[11,R[14],E,E,4,[[["self"]]]],[11,"next",E,R[63],5,[[["self"]],[[R[20]],[R[15],[R[20]]]]]],[11,R[14],E,E,5,[[["self"]]]],[11,"next",E,R[63],6,[[["self"]],[["str"],[R[15],["str"]]]]],[11,"fmt","ropey",E,0,[[["self"],[R[12]]],[R[4]]]],[11,"fmt",E,E,1,[[["self"],[R[12]]],[R[4]]]],[11,"fmt",E,E,2,[[["self"],[R[12]]],[R[4]]]],[11,"fmt",R[57],E,3,[[["self"],[R[12]]],[R[4]]]],[11,"fmt",E,E,4,[[["self"],[R[12]]],[R[4]]]],[11,"fmt",E,E,5,[[["self"],[R[12]]],[R[4]]]],[11,"fmt",E,E,6,[[["self"],[R[12]]],[R[4]]]],[11,"fmt","ropey",E,0,[[["self"],[R[12]]],[R[4]]]],[11,"fmt",E,E,2,[[["self"],[R[12]]],[R[4]]]],[11,R[64],E,E,0,[[[T]],["self"]]],[11,R[64],E,E,0,[[[T]],["self"]]],[11,R[64],E,E,0,[[[T]],["self"]]]],"p":[[3,"Rope"],[3,R[65]],[3,R[66]],[3,"Bytes"],[3,"Chars"],[3,"Lines"],[3,"Chunks"]]};
searchIndex["smallvec"]={"doc":"Small vectors in various sizes. These store a certain…","i":[[3,"Drain",R[0],"An iterator that removes the items from a `SmallVec` and…",N,N],[3,R[18],E,"A `Vec`-like container that can store a small number of…",N,N],[3,R[19],E,"An iterator that consumes a `SmallVec` and yields its…",N,N],[8,R[17],E,"Trait to be implemented by a collection that can be…",N,N],[10,R[3],E,"Extends a collection from a slice of its element type",0,[[["self"]]]],[8,"Array",E,"Types that can be used as the backing store for a SmallVec",N,N],[16,"Item",E,"The type of the array's elements.",1,N],[10,"size",E,"Returns the number of items the array can hold.",1,[[],[R[2]]]],[11,"new",E,"Construct an empty vector",2,[[],[R[0]]]],[11,"with_capacity",E,"Construct an empty vector with enough capacity…",2,[[[R[2]]],["self"]]],[11,"from_vec",E,"Construct a new `SmallVec` from a `Vec<A::Item>`.",2,[[["vec"]],[R[0]]]],[11,"from_buf",E,R[1],2,[[["a"]],[R[0]]]],[11,"from_buf_and_len",E,R[1],2,[[["a"],[R[2]]],[R[0]]]],[11,"from_buf_and_len_unchecked",E,R[1],2,[[["maybeuninit"],[R[2]]],[R[0]]]],[11,"set_len",E,"Sets the length of a vector.",2,[[["self"],[R[2]]]]],[11,"inline_size",E,"The maximum number of elements this vector can hold inline",2,[[["self"]],[R[2]]]],[11,"len",E,"The number of elements stored in the vector",2,[[["self"]],[R[2]]]],[11,"is_empty",E,"Returns `true` if the vector is empty",2,[[["self"]],["bool"]]],[11,R[67],E,"The number of items the vector can hold without reallocating",2,[[["self"]],[R[2]]]],[11,"spilled",E,"Returns `true` if the data has spilled into a separate…",2,[[["self"]],["bool"]]],[11,"drain",E,"Creates a draining iterator that removes the specified…",2,[[["self"],["r"]],["drain"]]],[11,"push",E,"Append an item to the vector.",2,[[["self"]]]],[11,"pop",E,"Remove an item from the end of the vector and return it,…",2,[[["self"]],[R[15]]]],[11,"grow",E,"Re-allocate to set the capacity to `max(new_cap,…",2,[[["self"],[R[2]]]]],[11,"reserve",E,"Reserve capacity for `additional` more elements to be…",2,[[["self"],[R[2]]]]],[11,"reserve_exact",E,"Reserve the minimum capacity for `additional` more…",2,[[["self"],[R[2]]]]],[11,R[68],E,"Shrink the capacity of the vector as much as possible.",2,[[["self"]]]],[11,"truncate",E,"Shorten the vector, keeping the first `len` elements and…",2,[[["self"],[R[2]]]]],[11,"as_slice",E,"Extracts a slice containing the entire vector.",2,[[["self"]]]],[11,"as_mut_slice",E,"Extracts a mutable slice of the entire vector.",2,[[["self"]]]],[11,"swap_remove",E,"Remove the element at position `index`, replacing it with…",2,[[["self"],[R[2]]]]],[11,"clear",E,"Remove all elements from the vector.",2,[[["self"]]]],[11,"remove",E,"Remove and return the element at position `index`,…",2,[[["self"],[R[2]]]]],[11,"insert",E,"Insert an element at position `index`, shifting all…",2,[[["self"],[R[2]]]]],[11,"insert_many",E,"Insert multiple elements at position `index`, shifting all…",2,[[["self"],[R[13]],[R[2]]]]],[11,"into_vec",E,"Convert a SmallVec to a Vec, without reallocating if the…",2,[[],["vec"]]],[11,"into_inner",E,"Convert the SmallVec into an `A` if possible. Otherwise…",2,[[],[R[4]]]],[11,"retain",E,"Retains only the elements specified by the predicate.",2,[[["self"],["fnmut"]]]],[11,"dedup",E,"Removes consecutive duplicate elements.",2,[[["self"]]]],[11,"dedup_by",E,"Removes consecutive duplicate elements using the given…",2,[[["self"],["f"]]]],[11,"dedup_by_key",E,"Removes consecutive elements that map to the same key.",2,[[["self"],["f"]]]],[11,"from_raw_parts",E,"Creates a `SmallVec` directly from the raw components of…",2,[[[R[2]]],[R[0]]]],[11,"from_slice",E,"Copy the elements from a slice into a new `SmallVec`.",2,[[],["self"]]],[11,"insert_from_slice",E,"Copy elements from a slice into the vector at position…",2,[[["self"],[R[2]]]]],[11,R[3],E,"Copy elements from a slice and append them to the vector.",2,[[["self"]]]],[11,"resize",E,"Resizes the vector so that its length is equal to `len`.",2,[[["self"],[R[2]]]]],[11,"from_elem",E,"Creates a `SmallVec` with `n` copies of `elem`. ``` use…",2,[[[R[2]]],["self"]]],[14,R[0],E,"Creates a [`SmallVec`] containing the arguments.",N,N],[11,"from",E,E,3,[[[T]],[T]]],[11,R[5],E,E,3,[[[U]],[R[4]]]],[11,"into",E,E,3,[[],[U]]],[11,R[6],E,E,3,[[],[R[4]]]],[11,R[7],E,E,3,[[],["i"]]],[11,R[8],E,E,3,[[["self"]],[T]]],[11,R[9],E,E,3,[[["self"]],[T]]],[11,R[10],E,E,3,[[["self"]],[R[58]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[5],E,E,2,[[[U]],[R[4]]]],[11,"into",E,E,2,[[],[U]]],[11,R[6],E,E,2,[[],[R[4]]]],[11,R[7],E,E,2,[[],["i"]]],[11,R[8],E,E,2,[[["self"]],[T]]],[11,R[9],E,E,2,[[["self"]],[T]]],[11,R[10],E,E,2,[[["self"]],[R[58]]]],[11,R[54],E,E,2,[[["self"]],[T]]],[11,R[55],E,E,2,[[["self"],[T]]]],[11,"from",E,E,4,[[[T]],[T]]],[11,R[5],E,E,4,[[[U]],[R[4]]]],[11,"into",E,E,4,[[],[U]]],[11,R[6],E,E,4,[[],[R[4]]]],[11,R[7],E,E,4,[[],["i"]]],[11,R[8],E,E,4,[[["self"]],[T]]],[11,R[9],E,E,4,[[["self"]],[T]]],[11,R[10],E,E,4,[[["self"]],[R[58]]]],[11,R[3],E,E,2,[[["self"]]]],[11,"deref_mut",E,E,2,[[["self"]]]],[11,"from",E,E,2,[[],[R[0]]]],[11,"from",E,E,2,[[["vec"]],[R[0]]]],[11,"from",E,E,2,[[["a"]],[R[0]]]],[11,"eq",E,E,2,[[["self"],[R[0]]],["bool"]]],[11,"ne",E,E,2,[[["self"],[R[0]]],["bool"]]],[11,"cmp",E,E,2,[[["self"],[R[0]]],[R[11]]]],[11,R[61],E,E,2,[[["self"],[R[0]]],[[R[15],[R[11]]],[R[11]]]]],[11,"hash",E,E,2,[[["self"],["h"]]]],[11,"deref",E,E,2,[[["self"]]]],[11,"drop",E,E,3,[[["self"]]]],[11,"drop",E,E,2,[[["self"]]]],[11,"drop",E,E,4,[[["self"]]]],[11,"index",E,E,2,[[["self"],["i"]]]],[11,"index_mut",E,E,2,[[["self"],["i"]]]],[11,"fmt",E,E,3,[[["self"],[R[12]]],[R[4]]]],[11,"fmt",E,E,2,[[["self"],[R[12]]],[R[4]]]],[11,"as_ref",E,E,2,[[["self"]]]],[11,"as_mut",E,E,2,[[["self"]]]],[11,R[64],E,E,2,[[[R[13]]],[R[0]]]],[11,"next",E,E,3,[[["self"]],[R[15]]]],[11,R[14],E,E,3,[[["self"]]]],[11,"next",E,E,4,[[["self"]],[R[15]]]],[11,R[14],E,E,4,[[["self"]]]],[11,R[16],E,E,3,[[["self"]],[R[15]]]],[11,R[16],E,E,4,[[["self"]],[R[15]]]],[11,"len",E,E,3,[[["self"]],[R[2]]]],[11,R[7],E,E,2,[[]]],[11,"extend",E,E,2,[[["self"],[R[13]]]]],[11,"clone",E,E,2,[[["self"]],[R[0]]]],[11,R[69],E,E,2,[[],[R[0]]]],[11,R[8],E,E,2,[[["self"]]]],[11,R[9],E,E,2,[[["self"]]]]],"p":[[8,R[17]],[8,"Array"],[3,R[18]],[3,"Drain"],[3,R[19]]]};
initSearch(searchIndex);addSearchOptions(searchIndex);